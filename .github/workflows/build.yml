name: build
on: [push]

env:
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm-cache
  EM_VERSION: 3.1.6
  EM_CACHE_FOLDER: 'emsdk-cache'

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [RelWithDebInfo]
        generator: [Ninja]
        include:
          - os: windows-2022
            build_type: RelWithDebInfo
            generator: "Visual Studio 17 2022"
            arch: amd64
            toolset: -T v143
          - os: windows-2019
            build_type: RelWithDebInfo
            generator: "Visual Studio 16 2019"
            arch: amd64_x86
            toolset: -T v141_xp

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Initialise MSVC environment
        if: "contains(matrix.os, 'windows')"
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.msvc_arch }}

      - uses: lukka/get-cmake@latest

      - run: mkdir ${{ env.CPM_SOURCE_CACHE }}

      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.CPM_SOURCE_CACHE }}
            ${{ github.workspace }}/build/_deps
            ${{ github.workspace }}/build/**/cmake_pch.*
          key: ${{ matrix.os }}-${{ hashFiles('CMakeLists.txt','.github/workflows/build.yml') }}
          
      - name: Build
        run: |
          cmake -S . -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{ matrix.toolset }}
          cmake --build build
          
      - name: Tar output on Unix systems
        if: "contains(matrix.os, 'windows') == false"
        run: |
          cd ${{ github.workspace }}/build
          tar cf haiyajan-menu.tar haiyajan-menu*

      - name: Get Short SHA
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Upload output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}${{ matrix.arch}}-${{ matrix.build_type }}-${{ steps.vars.outputs.sha_short }}
          path: |
            ${{ github.workspace }}/build/haiyajan-menu.tar
            ${{ github.workspace }}/build/**/haiyajan-menu.exe
            ${{ github.workspace }}/build/**/haiyajan-menu.pdb

  emscripten:
    name: Build for Web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup cache
        id: cache-system-libraries
        uses: actions/cache@v2
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: ${{env.EM_VERSION}}-${{ runner.os }}

      - uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      - name: Build
        run: |
          emcmake cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build build
          
      - name: Get Short SHA
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Upload output
        uses: actions/upload-artifact@v2
        with:
          name: emscripten-RelWithDebInfo-${{ steps.vars.outputs.sha_short }}
          path: |
            ${{ github.workspace }}/build/*.html
            ${{ github.workspace }}/build/*.js
            ${{ github.workspace }}/build/*.wasm
          
